// import logo from './logo.svg';
// import './App.css';
// import { Component } from 'react';

// // function App() {
// //   return (
// //     <div className="App">
// //       <header className="App-header">
// //         <img src={logo} className="App-logo" alt="logo" />
// //         <p>
// //           {1 + 1} Edit <code>src/App.js</code> and save to reload.
// //         </p>
// //         <a
// //           className="App-link"
// //           href="https://reactjs.org"
// //           target="_blank"
// //           rel="noopener noreferrer"
// //         >
// //           Learn React
// //         </a>
// //       </header>
// //     </div>
// //   );
// // }

// class App extends Component {
//   state = {
//     name: "Joao Pedro",
//     counter: 0,
//   };

//   handlePClick = () => {
//     //# const { name } = this.state;
//     this.setState({ name: 'Souza' });
//   }

//   // Usando arrow function, não precisamos de bind,
//   // Errow function não tem "this"
//   // Ela busca no elemento pai e encontra nosso this.state;
//   handleAClick = (event) => {

//     // Estou disendo para o react, que eu não quero que
//     // o evento faça o que ele ia fazer, deixa eu decidir
//     event.preventDefault();
//     const { counter } = this.state
//     this.setState({ counter: counter + 1 });
//     console.log(this.state.counter);
//   }

//   render() {

//     const { name, counter } = this.state;

//     return (
//       <div className="App">
//         <header className="App-header">
//           <img src={logo} className="App-logo" alt="logo" />
//           <p onClick={this.handlePClick}>
//             {name} {counter}
//           </p>
//           <a
//             onClick={this.handleAClick}
//             className="App-link"
//             href="https://reactjs.org"
//             target="_blank"
//             rel="noopener noreferrer"
//           >
//             Este é o link
//           </a>
//         </header>
//       </div>
//     );
//   }
// }

// export default App;












//   // Executa quando termina de montar o component "Render()"
//   // Esse metodo é um life cicle
//   componentDidMount() {
//     this.handleTimeout();
//   }

//   // É um componente que Serve para atualizar a pagina
//   // Esse metodo é um life cicle
//   componentDidUpdate() {
//     this.handleTimeout();
//   }

//   // É um componente que toda vez que o component for ser desmontado, ele é chamado para desmontar,
//   // Quando acontece alguma alteração no componente, ele é chamado para desmontar "a tela por
//   // exemplo"
//   componentWillUnmount() {
//     // usando "clearTimeout" para limpar a sugeira de dados que fica na telas
//     clearTimeout(this.timeoutUpdate);
//   }






// //Faz consulta em APIs, consulta esterna
// loadingPosts = async () => {
//     const postsResponse = fetch('https://jsonplaceholder.typicode.com/posts')
//       .then(response => response.json())
//       .then(posts => this.setState({ posts: posts }));
//   }




